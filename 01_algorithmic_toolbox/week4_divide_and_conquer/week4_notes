non-overlapping subproblems of the same original type
combine results into a solution to the orignal problem

rewrite from recursive to iterative

#1 Binary Search

5
1 5 8 12 13
5
8 1 23 1 11

2 0 -1 0 -1

Failed case #2/36: (Wrong answer)

Input:
5
1 2 3 4 5
5
1 2 3 4 5

Your output:
0 1 2 0 1
Correct output:
0 1 2 3 4
 (Time used: 0.00/5.00, memory used: 43061248/536870912.)

Failed case #32/36: time limit exceeded (Time used: 6.60/5.00, memory used: 43114496/536870912.)

Failed case #36/36: time limit exceeded (Time used: 6.94/5.00, memory used: 43151360/536870912.)

#1.2 Binary Search with Duplicates

Need to return the index of the leftmost element that matches in the array

Failed case #1/57: (Wrong answer)

Input:
7
2 4 4 4 7 7 9
4
9 4 5 2

Your output:
6 3 -1 0
Correct output:
6 1 -1 0
 (Time used: 0.01/5.00, memory used: 41299968/536870912.)

Failed case #6/57: Wrong answer

7
0 2 2 4 4 4 4
4
1 0 2 4

-1 0 1 3

1
0
1
0

0

3
0 0 0
1
0

0

Failed case #54/57: time limit exceeded (Time used: 9.99/5.00, memory used: 41668608/536870912.)

(Time used: 0.01/5.00, memory used: 41295872/536870912.)

#2 Majority Element

5
2 3 9 2 2

1

l = 0 r = 5
mid = (0+5) // 2 = 2
left 2 3 9  right 2 2
func(a, l, mid) func(a, mid, r)
if the left and the right return the same number, then the number is majority for both left and right, so it is majority for the whole segment

4
1 2 3 4

0

4
1 2 3 1

0

[2, 3, 9, 2, 2]
[2, 3] [9, 2, 2]
[2] [3] [9] [2, 2]
            [2] [2]

7
1 2 3 1 5 1 1

# split into 2 or more disjoint subproblems
# solve subproblems recursively
# combine results of subproblems

#3 Improving Quick Sort

5
2 3 9 2 2

2 2 2 3 9

11
6 4 2 6 9 3 9 4 7 6 1
1 2 3 4 4 6 6 6 7 9 9
Process finished with exit code 0

#4 Number of Inversions

5
2 3 9 2 9

2

Failed case #3/14: (Wrong answer)

Input:
6
9 8 7 3 2 1

Your output:
16

Correct output:
15
(Time used: 0.01/5.00, memory used: 13365248/2147483648.)

#5 Organizing a Lottery
A participant's payoff is proportional to the number of ranges that contain the participant's number minus the number of ranges that does not contain it.

set of points on a line and a set of segments on a line. Compute for each point the number of segments that contain this point.

first is number of segments

second is number of points

then the segments in pairs of points

then the points in one line

give output of number of overlapping segments for each point in order

Sample 1

2 3
0 5
7 10
1 6 11

1 0 0

1 3
-10 10
-100 100 0

0 0 1

3 2
0 5
-3 2
7 10
1 6

2 0

Failed case #4/25: Wrong answer

(Time used: 0.15/20.00, memory used: 36478976/2147483648.)

3 5
0 5
-3 2
7 10
-3 2 5 7 10

2 0

#6 Closest Points

Sample 1
2
0 0
3 4

5.0

4
7 7
1 100
4 8
7 7

0.0

11
4 4
-2 -2
-3 -4
-1 3
2 3
-4 0
1 1
-1 -1
3 -1
-4 2
-2 4

1.414213

Failed case #22/23: time limit exceeded (Time used: 10.26/10.00, memory used: 39383040/2147483648.)

Barely, by the seat of your pants...

Good job! (Max time used: 9.72/10.00, max memory used: 36556800/2147483648.)
