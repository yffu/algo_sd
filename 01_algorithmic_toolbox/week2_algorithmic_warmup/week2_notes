n		0	1	2	3	4	5	6	7	8
fib		0	1	1	2	3	5	8	13	21

recursive to iterative, runs in O(n) time

start from 0 and build up.

pseudocode

for i in range(n)
	
	
	
fib(10) = 55
fib(30) = 832040
fib(35) = 9227465

greatest common denominator -> the euclidean algorithm

test case 16
707459358 1451906588
2

if you know 2 is not a factor, then

find all the prime factors of the smaller number, and see which ones divide into the larger one also.

if 2 is a divisor, then n/2 is the largest divisor.

if 2 is not a divisor, then the largest divisor is smaller than n/2

it should only go up to sqrt(n)

a = a' + bq

d divides a and b;

a/d = n
b/d = m

dn = a' + dmq

Fibonacci 

need to establish the period specific to the modulus.

n % period = r

then take Fib(r) % modulo

period always starts with 01

anytime you find 01 again, then the loop begins again.

F_0 is 0
F_1 is 1
F_2 is 1
F_3 is 2
F_4 is 3

only with F_2 do you enter the loop.

find the last digit of the sum of the fib numbers up to F_n

modulo of the sums is the same as the sum of the modulo

so you can modulo the different fib numbers before summing them up.

but modulo of subsequent fib numbers will have a periodicity. 

last digit is modulo 10. what is the period for modulo 10?

pisano period for modulo 10 is 60

and what is the sum of the first 60 fib numbers modulo 10?
0  + 1  + 1  + 2  + 3  = 5
F0 + F1 + F2 + F3 + F4
= F0 + F1 + (F0 + F1) + (F1 + F2) + (F3 + F2)
= F0 + F1 + F0 + F1 + F1 + F1 + F0 + 


1 2
f1 + f2 = 1 + 1 = 2

0 0 
f0 + f0 = 0

n		0	1	2	3	4	5	6	7	8
fib		0	1	1	2	3	5	8	13	21

f0^2 + f1^2 + f2^2 = f2 * (f2+f1) = 1 * (1+1)

for up to f2

get the base cases

f0^2 = 0

f0^2 + f1^2 = f1 * (f1+f0) = 1* 1

this works. 

