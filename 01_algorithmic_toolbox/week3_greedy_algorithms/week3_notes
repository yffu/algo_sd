Ctrl + D to send the EOF

3 50
60 20
100 50
120 30

Lemma: there is a some G1 between A and B, this is the first stop on this route to refill.
G is the farthest gas station reachable from A. 
If G1 = G, then the lemma is proved.
Else, G1 has to be closer to A than G, 
Consider the next step which is G2.

A ---- G1 ---- G ---- G2

G2 is reachable from G1, then we can refill at G, then go to G2 for another optimal route.
since G2 is reachable from G1, then it is reachable from G.

Second case is when G2 is closer to A than G

A ---- G1 ---- G2 ---- G

In this case we can avoid refill at G1, and go to G2 or G, then this reduces the number of stops on the optimal route, which is impossible.

So this second case with G2 behind G is impossible,

950
400
4
200 375 550 750

10
3
4
1 2 5 9

Greedy Ingredients

Reduction to Subproblem
Safe move -> consistent with an optimal solution

Greedy choice
Prove that it is a safe move -> that the step is optimal, and therefore the whole process is optimal. -> the most delta for the reduction in problem to sub-problem.
Reduce to a subproblem
Solve the subproblem THE SAME WAY

Problem ---greedy choice---> Safe move ----Subproblem---> Problem

1
23
39
897

3
1 3 -5
-2 4 1
23


Problem #5
Sample 1
3
1 3
2 5
3 6

1
3

Sample 2
4
4 7
1 3
2 5
5 6

2
3 6


Sample 3
100
41 42
52 52
63 63
80 82
78 79
35 35
22 23
31 32
44 45
81 82
36 38
10 12
1 1
23 23
32 33
87 88
55 56
69 71
89 91
93 93
38 40
33 34
14 16
57 59
70 72
36 36
29 29
73 74
66 68
36 38
1 3
49 50
68 70
26 28
30 30
1 2
64 65
57 58
58 58
51 53
41 41
17 18
45 46
4 4
0 1
65 67
92 93
84 85
75 77
39 41
15 15
29 31
83 84
12 14
91 93
83 84
81 81
3 4
66 67
8 8
17 19
86 87
44 44
34 34
74 74
94 95
79 81
29 29
60 61
58 59
62 62
54 56
58 58
79 79
89 91
40 42
2 4
12 14
5 5
28 28
35 36
7 8
82 84
49 51
2 4
57 59
25 27
52 53
48 49
9 9
10 10
78 78
26 26
83 84
22 24
86 87
52 54
49 51
63 64
54 54

43
1 4 5 8 9 10 14 15 18 23 26 28 29 30 32 34 35 36 40 41 44 46 49 52 54 56 58 61 62 63 65 67 70 74 77 78 79 81 84 87 91 93 95

4343
1 4 5 8 9 10 14 15 18 23 26 28 29 30 32 34 35 36 40 41 44 46 49 52 54 56 58 61 62 63 65 67 70 74 77 78 79 81 84 87 91 93 95
[Segment(start=0, end=1), Segment(start=1, end=1), Segment(start=1, end=2), Segment(start=1, end=3), Segment(start=2, end=4), Segment(start=2, end=4), Segment(start=3, end=4), Segment(start=4, end=4), Segment(start=5, end=5), Segment(start=7, end=8), Segment(start=8, end=8), Segment(start=9, end=9), Segment(start=10, end=10), Segment(start=10, end=12), Segment(start=12, end=14), Segment(start=12, end=14), Segment(start=14, end=16), Segment(start=15, end=15), Segment(start=17, end=18), Segment(start=17, end=19), Segment(start=22, end=23), Segment(start=22, end=24), Segment(start=23, end=23), Segment(start=25, end=27), Segment(start=26, end=26), Segment(start=26, end=28), Segment(start=28, end=28), Segment(start=29, end=29), Segment(start=29, end=29), Segment(start=29, end=31), Segment(start=30, end=30), Segment(start=31, end=32), Segment(start=32, end=33), Segment(start=33, end=34), Segment(start=34, end=34), Segment(start=35, end=35), Segment(start=35, end=36), Segment(start=36, end=36), Segment(start=36, end=38), Segment(start=36, end=38), Segment(start=38, end=40), Segment(start=39, end=41), Segment(start=40, end=42), Segment(start=41, end=41), Segment(start=41, end=42), Segment(start=44, end=44), Segment(start=44, end=45), Segment(start=45, end=46), Segment(start=48, end=49), Segment(start=49, end=50), Segment(start=49, end=51), Segment(start=49, end=51), Segment(start=51, end=53), Segment(start=52, end=52), Segment(start=52, end=53), Segment(start=52, end=54), Segment(start=54, end=54), Segment(start=54, end=56), Segment(start=55, end=56), Segment(start=57, end=58), Segment(start=57, end=59), Segment(start=57, end=59), Segment(start=58, end=58), Segment(start=58, end=58), Segment(start=58, end=59), Segment(start=60, end=61), Segment(start=62, end=62), Segment(start=63, end=63), Segment(start=63, end=64), Segment(start=64, end=65), Segment(start=65, end=67), Segment(start=66, end=67), Segment(start=66, end=68), Segment(start=68, end=70), Segment(start=69, end=71), Segment(start=70, end=72), Segment(start=73, end=74), Segment(start=74, end=74), Segment(start=75, end=77), Segment(start=78, end=78), Segment(start=78, end=79), Segment(start=79, end=79), Segment(start=79, end=81), Segment(start=80, end=82), Segment(start=81, end=81), Segment(start=81, end=82), Segment(start=82, end=84), Segment(start=83, end=84), Segment(start=83, end=84), Segment(start=83, end=84), Segment(start=84, end=85), Segment(start=86, end=87), Segment(start=86, end=87), Segment(start=87, end=88), Segment(start=89, end=91), Segment(start=89, end=91), Segment(start=91, end=93), Segment(start=92, end=93), Segment(start=93, end=93), Segment(start=94, end=95)]


Example

4
6 8
1 3
3 5
8 10

2
3 8

Example

4
1 3
2 3
5 8
7 8

2
3 8

Example

2
1 3
1 3

1
3

Example

2
1 3
1 2

1
2

Example

2
1 2
5 8

2
2 8

Example

4
1 3
5 8
9 10
9 11

3
3 8 10

Example
4
1 2
5 8
9 10
9 11

3
2 8 10

Example
4
1 2
5 7
2 5

2
2 7

Example
5
0 0
0 0
0 0
0 0
1 1

Failed case #4/15: Wrong answer
segment #2 is not covered
 (Time used: 0.01/5.00, memory used: 9326592/536870912.

Sample
2
0 0
-1 0

Sample
2
1000000000 1000000000
999999999 999999999

2
999999999 1000000000

 Constraints. 1 ≤ 𝑛 ≤ 100; 0 ≤ 𝑎𝑖 ≤ 𝑏𝑖 ≤ 109
for all 0 ≤ 𝑖 < 𝑛.


Sample

4
5 10
5 9
6 7
8 9

1
7

false, since 8 9 is not covered

after update

[Segment(start=5, end=9), Segment(start=5, end=10), Segment(start=6, end=7), Segment(start=8, end=9)]

2
7 9

Constraints. 1 ≤ 𝑛 ≤ 109

sum of an arithmetic series.
sum = n(n+1)/2

a is the number of consecutive integers that add up to form part of n

n = a(a+1)/2 + r
where r is greater than a.

if a = 1
s = 1(1+1)/2 = 1
if a = 2
s = 2(1+2)/2 = 3
if a = 3
s = 3(1+3)/2 = 6

a(a+1)/2 + a < n

and maximize on a.

n = 1
a(a+1)/2 = 1, exactly equal to n

n = 2

a(a+1)+2a / 2 < n

Maximum Salary

2
21 2

221

5
9 4 6 1 9

99641

3
23 39 92

923923

3
23 20 2010 2 231 25

2
619 67
61967 vs 67619

210 20 2

210 2
2102 vs 2210

210 20
21020 vs 20210

Input:
100
2 8 2 3 6 4 1 1 10 6 3 3 6 1 3 8 4 6 1 10 8 4 10 4 1 3 2 3 2 6 1 5 2 9 8 5 10 8 7 9 6 4 2 6 3 8 8 9 8 2 9 10 3 10 7 5 7 1 7 5 1 4 7 6 1 10 5 4 8 4 2 7 8 1 1 7 4 1 1 9 8 6 5 9 9 3 7 6 3 10 8 10 7 2 5 1 1 9 9 5

Your output:
9999999998888888888887777777776666666666555555554444444443333333333222222222101010101010101010111111111111111

Correct output:
9999999998888888888887777777776666666666555555554444444443333333333222222222111111111111111101010101010101010

maybe think about smallest to largest?

2
2 3 4 10 10 1 1

Failed case #6/11: Wrong answer

 (Time used: 0.00/5.00, memory used: 9134080/536870912.)

8
56 5 6 556 566 666 665 656

6666665656566565565
6666665656566565565
6666665656566565565
6666665656566565565

['6', '666', '665', '656', '5', '56', '566', '556']
6666665656556566556

5 56
556
565

1 10

the single digit number gets preference when the multi-digit number's second digit is smaller

case in point

1 11 -> 111 are exactly the same regardless of order

1 10 -> 1 should be first since 0 is less than 1
110 versus 101

1 12 -> 12 should be first since 2 is greater than 1
112 versus 121

('56', '566'), ('566', '566')

56566

56656

Failed case #9/11: Wrong answer

 (Time used: 0.01/5.00, memory used: 9142272/536870912.)

 2 223

 222 versus 223

 2232 over 2223


Failed case #1/11: (Wrong answer)

Input:
3
23 39 92

Your output:
max len: 2
a rank: [('92', '92'), ('39', '39'), ('23', '23')]
923923

Correct output:
923923
 (Time used: 0.00/5.00, memory used: 9134080/536870912.)
